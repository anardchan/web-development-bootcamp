<!DOCTYPE html>
<html>
  <head>
    <title>Form Example</title>
    <style>
      /* CSS styles */
      body {
        font-family: Arial, sans-serif;
        background-color: #f5f5f5;
        margin: 0;
        padding: 0;
      }

      .container {
        max-width: 600px;
        margin: 50px auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      }

      h1 {
        text-align: center;
      }

      form {
        margin-top: 20px;
      }

      label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
      }

      input[type="text"],
      input[type="number"] {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
        margin-bottom: 10px;
      }

      input[type="submit"] {
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
      }

      .response-area {
        margin-top: 20px;
        background-color: #f0f0f0;

        padding: 20px 5px;
      }

      #get {
        background-color: #2ecc71;
      }

      #get:hover {
        background-color: #27ae60;
      }

      #post {
        background-color: #3498db;
      }

      #post:hover {
        background-color: #2980b9;
      }

      #put {
        background-color: #9b59b6;
      }

      #put:hover {
        background-color: #8e44ad;
      }

      #patch {
        background-color: #f1c40f;
      }

      #patch:hover {
        background-color: #f39c12;
      }

      #delete {
        background-color: #e74c3c;
      }

      #delete:hover {
        background-color: #c0392b;
      }
    </style>
  </head>

  <body>
    <div class="container">
      <div class="response-area">
        <p><%= content %></p>
      </div>
      <form id="myForm" method="post">
        <label for="idInput">Id:</label>
        <input type="text" id="idInput" name="id" />

        <label for="secretInput">Secret:</label>
        <input type="text" id="secretInput" name="secret" />

        <label for="scoreInput">Score:</label>
        <input type="number" id="scoreInput" name="score" />

        <label for="submit">Route:</label>
        <input id="get" type="submit" value="GET" formaction="/get-secret" />
        <input id="post" type="submit" value="POST" formaction="/post-secret" />
        <input id="put" type="submit" value="PUT" formaction="/put-secret" />
        <input
          id="patch"
          type="submit"
          value="PATCH"
          formaction="/patch-secret"
        />
        <input
          id="delete"
          type="submit"
          value="DELETE"
          formaction="/delete-secret"
        />
      </form>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const form = document.getElementById("myForm");
        const idInput = document.getElementById("idInput");
        const secretInput = document.getElementById("secretInput");
        const scoreInput = document.getElementById("scoreInput");

        let clickedAction = null;

        // Handle button clicks
        form.querySelectorAll('input[type="submit"]').forEach((btn) => {
          btn.addEventListener("click", () => {
            clickedAction = btn.value.toUpperCase();

            // Reset requirements
            idInput.required = false;
            secretInput.required = false;
            scoreInput.required = false;

            // Apply per-route requirements
            switch (clickedAction) {
              case "GET":
                idInput.required = true;
                break;

              case "POST":
                secretInput.required = true;
                scoreInput.required = true;
                break;

              case "PUT":
                idInput.required = true;
                secretInput.required = true;
                scoreInput.required = true;
                break;

              case "PATCH":
                idInput.required = true;
                // don't mark secret/score required here, custom check runs on submit
                break;

              case "DELETE":
                idInput.required = true;
                break;
            }
          });
        });

        // Extra validation for PATCH
        form.addEventListener("submit", (e) => {
          if (clickedAction === "PATCH") {
            if (!secretInput.value && !scoreInput.value) {
              e.preventDefault();
              secretInput.setCustomValidity(
                "Either Secret or Score is required."
              );
              scoreInput.setCustomValidity(
                "Either Secret or Score is required."
              );
              secretInput.reportValidity(); // show native validation bubble
            } else {
              // clear custom validity if ok
              secretInput.setCustomValidity("");
              scoreInput.setCustomValidity("");
            }
          }
        });
      });
    </script>
  </body>
</html>
